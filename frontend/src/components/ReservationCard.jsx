// src/components/ReservationCard.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { checkInReservation, startSessionFromReservation, cancelReservation } from '../services/stationService';
import '../styles/ReservationCard.css';

const ReservationCard = ({ reservation, onUpdate, onError }) => {
  const navigate = useNavigate();
  const [loading, setLoading] = React.useState(false);
  const [actionLoading, setActionLoading] = React.useState('');

  const formatDateTime = (dateTimeStr) => {
    if (!dateTimeStr) return '-';
    try {
      const date = new Date(dateTimeStr);
      return date.toLocaleString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateTimeStr;
    }
  };

  const formatTimeRemaining = (deadlineStr) => {
    if (!deadlineStr) return null;
    try {
      const deadline = new Date(deadlineStr);
      const now = new Date();
      const diff = deadline - now;
      
      if (diff < 0) return 'ƒê√£ qu√° h·∫°n';
      const minutes = Math.floor(diff / 60000);
      const hours = Math.floor(minutes / 60);
      
      if (hours > 0) return `C√≤n ${hours} gi·ªù ${minutes % 60} ph√∫t`;
      return `C√≤n ${minutes} ph√∫t`;
    } catch {
      return null;
    }
  };

  const getStatusLabel = (status) => {
    const labels = {
      pending: 'Ch·ªù thanh to√°n',
      confirmed: 'ƒê√£ x√°c nh·∫≠n',
      active: 'ƒêang ho·∫°t ƒë·ªông',
      completed: 'Ho√†n th√†nh',
      cancelled: 'ƒê√£ h·ªßy',
      expired: 'H·∫øt h·∫°n',
      no_show: 'Kh√¥ng ƒë·∫øn'
    };
    return labels[status] || status;
  };

  const getStatusClass = (status) => {
    const classes = {
      pending: 'status-pending',
      confirmed: 'status-confirmed',
      active: 'status-active',
      completed: 'status-completed',
      cancelled: 'status-cancelled',
      expired: 'status-expired',
      no_show: 'status-no-show'
    };
    return classes[status] || 'status-default';
  };

  const canCheckIn = () => {
    if (!reservation.checkInDeadline) return false;
    if (reservation.isCheckedIn) return false;
    if (reservation.status !== 'confirmed') return false;
    
    const deadline = new Date(reservation.checkInDeadline);
    const now = new Date();
    const startTime = new Date(reservation.reservedStartTime);
    const earliestCheckIn = new Date(startTime.getTime() - 30 * 60 * 1000); // 30 ph√∫t tr∆∞·ªõc
    
    return now >= earliestCheckIn && now <= deadline;
  };

  const handleCheckIn = async () => {
    if (!canCheckIn()) {
      alert('Kh√¥ng th·ªÉ check-in. Vui l√≤ng ki·ªÉm tra th·ªùi gian check-in cho ph√©p.');
      return;
    }

    if (!confirm('X√°c nh·∫≠n check-in? B·∫°n s·∫Ω nh·∫≠n l·∫°i ti·ªÅn c·ªçc khi check-in th√†nh c√¥ng.')) {
      return;
    }

    setActionLoading('checkin');
    try {
      const result = await checkInReservation(reservation.reservationId);
      alert(`‚úÖ Check-in th√†nh c√¥ng!\nTi·ªÅn c·ªçc ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i v√†o v√≠.`);
      onUpdate && onUpdate();
    } catch (err) {
      const errorMsg = err.response?.data?.message || err.message || 'Check-in th·∫•t b·∫°i';
      alert(`‚ùå ${errorMsg}`);
      onError && onError(errorMsg);
    } finally {
      setActionLoading('');
    }
  };

  const handleStartSession = async () => {
    if (!confirm('B·∫Øt ƒë·∫ßu phi√™n s·∫°c ngay b√¢y gi·ªù?')) return;
    
    setActionLoading('start');
    try {
      const session = await startSessionFromReservation(reservation.reservationId);
      alert('‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu phi√™n s·∫°c');
      onUpdate && onUpdate();
      // Navigate to charging live page
      navigate('/sessions/live');
    } catch (err) {
      alert(`‚ùå ${err.response?.data?.message || err.message || 'Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu phi√™n s·∫°c'}`);
      onError && onError(err.message);
    } finally {
      setActionLoading('');
    }
  };

  const [showCancelModal, setShowCancelModal] = React.useState(false);
  const [cancelReason, setCancelReason] = React.useState('');

  const handleCancelClick = () => {
    setCancelReason('');
    setShowCancelModal(true);
  };

  const handleCancelConfirm = async () => {
    if (!cancelReason.trim()) {
      alert('Vui l√≤ng nh·∫≠p l√Ω do h·ªßy ƒë·∫∑t ch·ªó.');
      return;
    }

    setShowCancelModal(false);
    setActionLoading('cancel');
    
    try {
      await cancelReservation(reservation.reservationId, cancelReason.trim());
      alert('‚úÖ ƒê√£ h·ªßy ƒë·∫∑t ch·ªó th√†nh c√¥ng!');
      onUpdate && onUpdate();
    } catch (err) {
      alert(`‚ùå ${err.response?.data?.message || err.message || 'Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t ch·ªó'}`);
      onError && onError(err.message);
    } finally {
      setActionLoading('');
      setCancelReason('');
    }
  };

  const handleCancel = handleCancelClick;

  return (
    <div className={`reservation-card ${getStatusClass(reservation.status)}`}>
      <div className="reservation-card-header">
        <div className="reservation-code">
          <i className="fas fa-calendar-check"></i>
          <div>
            <span className="code-label">M√£ ƒë·∫∑t ch·ªó:</span>
            <strong>{reservation.confirmationCode || reservation.reservationId}</strong>
          </div>
        </div>
        <span className={`reservation-status ${getStatusClass(reservation.status)}`}>
          {getStatusLabel(reservation.status)}
        </span>
      </div>

      <div className="reservation-card-body">
        <div className="reservation-info-row">
          <span className="info-icon">üìç</span>
          <span className="info-label">Tr·∫°m s·∫°c:</span>
          <span>ID {reservation.stationId}</span>
          {reservation.chargerId && (
            <>
              <span className="separator">‚Ä¢</span>
              <span className="info-label">C·ªïng:</span>
              <span>ID {reservation.chargerId}</span>
            </>
          )}
        </div>

        <div className="reservation-info-row">
          <span className="info-icon">üïê</span>
          <span className="info-label">Th·ªùi gian:</span>
          <span>{formatDateTime(reservation.reservedStartTime)}</span>
          <span className="separator">‚Üí</span>
          <span>{formatDateTime(reservation.reservedEndTime)}</span>
        </div>

        {reservation.durationMinutes && (
          <div className="reservation-info-row">
            <span className="info-icon">‚è±Ô∏è</span>
            <span className="info-label">Th·ªùi l∆∞·ª£ng:</span>
            <span>{reservation.durationMinutes} ph√∫t</span>
          </div>
        )}

        {reservation.depositAmount && (
          <div className="reservation-info-row highlight">
            <span className="info-icon">üí∞</span>
            <span className="info-label">Ti·ªÅn c·ªçc:</span>
            <span className="deposit-amount">
              {new Intl.NumberFormat('vi-VN').format(reservation.depositAmount)} ‚Ç´
              {reservation.depositRefunded && (
                <span className="deposit-refunded">‚úì ƒê√£ ho√†n</span>
              )}
            </span>
          </div>
        )}

        {reservation.checkInDeadline && !reservation.isCheckedIn && (
          <div className="reservation-info-row warning">
            <span className="info-icon">‚è∞</span>
            <span className="info-label">H·∫°n check-in:</span>
            <span className="checkin-deadline">
              {formatDateTime(reservation.checkInDeadline)}
              {canCheckIn() && (
                <span className="checkin-remaining"> ({formatTimeRemaining(reservation.checkInDeadline)})</span>
              )}
            </span>
          </div>
        )}

        {reservation.isCheckedIn && (
          <div className="reservation-info-row success">
            <span className="info-icon">‚úì</span>
            <span>ƒê√£ check-in l√∫c: {formatDateTime(reservation.checkInTime)}</span>
          </div>
        )}

        {reservation.status === 'no_show' && reservation.noShowCount > 0 && (
          <div className="reservation-info-row error">
            <span className="info-icon">‚ö†Ô∏è</span>
            <span>S·ªë l·∫ßn kh√¥ng ƒë·∫øn: {reservation.noShowCount}</span>
          </div>
        )}
      </div>

      <div className="reservation-card-actions">
        {reservation.status === 'confirmed' && canCheckIn() && (
          <button
            className="btn-checkin"
            onClick={handleCheckIn}
            disabled={loading || actionLoading === 'checkin'}
          >
            {actionLoading === 'checkin' ? (
              <>
                <i className="fas fa-spinner fa-spin"></i> ƒêang x·ª≠ l√Ω...
              </>
            ) : (
              <>
                <i className="fas fa-check-circle"></i> Check-in
              </>
            )}
          </button>
        )}

        {reservation.status === 'confirmed' && reservation.isCheckedIn && !reservation.sessionId && (
          <button
            className="btn-start"
            onClick={handleStartSession}
            disabled={loading || actionLoading === 'start'}
          >
            {actionLoading === 'start' ? (
              <>
                <i className="fas fa-spinner fa-spin"></i> ƒêang b·∫Øt ƒë·∫ßu...
              </>
            ) : (
              <>
                <i className="fas fa-play"></i> B·∫Øt ƒë·∫ßu s·∫°c
              </>
            )}
          </button>
        )}

        {reservation.status === 'active' && reservation.sessionId && (
          <button
            className="btn-view-live"
            onClick={() => navigate('/sessions/live')}
          >
            <i className="fas fa-tv"></i> Xem qu√° tr√¨nh s·∫°c
          </button>
        )}

        {/* Hi·ªÉn th·ªã n√∫t h·ªßy cho pending v√† confirmed (ch∆∞a check-in) */}
        {(reservation.status === 'pending' || 
          (reservation.status === 'confirmed' && !reservation.isCheckedIn)) && (
          <button
            className="btn-cancel"
            onClick={handleCancel}
            disabled={loading || actionLoading === 'cancel'}
            title="H·ªßy ƒë·∫∑t ch·ªó n√†y"
          >
            {actionLoading === 'cancel' ? (
              <>
                <i className="fas fa-spinner fa-spin"></i> ƒêang h·ªßy...
              </>
            ) : (
              <>
                <i className="fas fa-times-circle"></i> H·ªßy ƒë·∫∑t ch·ªó
              </>
            )}
          </button>
        )}

        {reservation.qrCode && (
          <button
            className="btn-qr"
            onClick={() => alert(`QR Code: ${reservation.qrCode}`)}
            title="Xem QR Code"
          >
            <i className="fas fa-qrcode"></i>
          </button>
        )}
      </div>

      {/* Cancel Confirmation Modal */}
      {showCancelModal && (
        <div className="cancel-modal-overlay" onClick={() => setShowCancelModal(false)}>
          <div className="cancel-modal" onClick={(e) => e.stopPropagation()}>
            <div className="cancel-modal-header">
              <h3>
                <i className="fas fa-exclamation-triangle"></i>
                X√°c nh·∫≠n h·ªßy ƒë·∫∑t ch·ªó
              </h3>
              <button 
                className="cancel-modal-close"
                onClick={() => setShowCancelModal(false)}
              >
                <i className="fas fa-times"></i>
              </button>
            </div>
            <div className="cancel-modal-body">
              <p className="cancel-warning">
                B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫∑t ch·ªó n√†y?
              </p>
              <div className="cancel-info-box">
                <div className="cancel-info-item">
                  <span className="cancel-info-label">M√£ ƒë·∫∑t ch·ªó:</span>
                  <span className="cancel-info-value">
                    {reservation.confirmationCode || reservation.reservationId}
                  </span>
                </div>
                {reservation.depositAmount && (
                  <div className="cancel-info-item">
                    <span className="cancel-info-label">Ti·ªÅn c·ªçc:</span>
                    <span className="cancel-info-value deposit">
                      {new Intl.NumberFormat('vi-VN').format(reservation.depositAmount)} ‚Ç´
                    </span>
                  </div>
                )}
                <div className="cancel-info-item">
                  <span className="cancel-info-label">Th·ªùi gian ƒë·∫∑t:</span>
                  <span className="cancel-info-value">
                    {formatDateTime(reservation.reservedStartTime)}
                  </span>
                </div>
              </div>
              <div className="cancel-reason-input">
                <label htmlFor="cancel-reason">
                  <i className="fas fa-comment"></i>
                  L√Ω do h·ªßy ƒë·∫∑t ch·ªó <span className="required">*</span>
                </label>
                <textarea
                  id="cancel-reason"
                  value={cancelReason}
                  onChange={(e) => setCancelReason(e.target.value)}
                  placeholder="Nh·∫≠p l√Ω do h·ªßy ƒë·∫∑t ch·ªó (v√≠ d·ª•: Thay ƒë·ªïi k·∫ø ho·∫°ch, Kh√¥ng c√≤n c·∫ßn s·∫°c...)"
                  rows="3"
                  className="cancel-reason-textarea"
                />
              </div>
              <div className="cancel-notice">
                <i className="fas fa-info-circle"></i>
                <span>L∆∞u √Ω: Ti·ªÅn c·ªçc c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c ho√†n l·∫°i t√πy thu·ªôc v√†o th·ªùi ƒëi·ªÉm h·ªßy.</span>
              </div>
            </div>
            <div className="cancel-modal-footer">
              <button
                className="btn-cancel-secondary"
                onClick={() => setShowCancelModal(false)}
                disabled={actionLoading === 'cancel'}
              >
                <i className="fas fa-arrow-left"></i>
                Quay l·∫°i
              </button>
              <button
                className="btn-cancel-primary"
                onClick={handleCancelConfirm}
                disabled={!cancelReason.trim() || actionLoading === 'cancel'}
              >
                {actionLoading === 'cancel' ? (
                  <>
                    <i className="fas fa-spinner fa-spin"></i>
                    ƒêang h·ªßy...
                  </>
                ) : (
                  <>
                    <i className="fas fa-times-circle"></i>
                    X√°c nh·∫≠n h·ªßy
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ReservationCard;

